//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""PlayerSlash"",
            ""id"": ""23daf18f-22a1-4bcc-bd26-d3fd95fff109"",
            ""actions"": [
                {
                    ""name"": ""FireR"",
                    ""type"": ""Button"",
                    ""id"": ""f1489408-de18-4a76-ad3d-0aae9cf21f78"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireL"",
                    ""type"": ""Button"",
                    ""id"": ""7c52df5a-9886-42e4-a916-44fc6e8e9d1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireTop"",
                    ""type"": ""Button"",
                    ""id"": ""2fbc775c-3853-4d17-9fd3-6f26b36eb329"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca11e238-44ae-4752-9eee-bdb0751d8684"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7502293-3e18-460a-8a5c-9240cf00bcae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7f62ad5-cdfb-4b3f-8be2-c373c08ac87d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be324528-0d1b-4804-90bb-afbc6a62dbd5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a209a1e-0817-4c8c-a7c0-55ba5496ce4c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireTop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ddb1728-01a9-4be4-9587-950daaf81409"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireTop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerSlash
        m_PlayerSlash = asset.FindActionMap("PlayerSlash", throwIfNotFound: true);
        m_PlayerSlash_FireR = m_PlayerSlash.FindAction("FireR", throwIfNotFound: true);
        m_PlayerSlash_FireL = m_PlayerSlash.FindAction("FireL", throwIfNotFound: true);
        m_PlayerSlash_FireTop = m_PlayerSlash.FindAction("FireTop", throwIfNotFound: true);
    }

    ~@InputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_PlayerSlash.enabled, "This will cause a leak and performance issues, InputSystem_Actions.PlayerSlash.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerSlash
    private readonly InputActionMap m_PlayerSlash;
    private List<IPlayerSlashActions> m_PlayerSlashActionsCallbackInterfaces = new List<IPlayerSlashActions>();
    private readonly InputAction m_PlayerSlash_FireR;
    private readonly InputAction m_PlayerSlash_FireL;
    private readonly InputAction m_PlayerSlash_FireTop;
    public struct PlayerSlashActions
    {
        private @InputSystem_Actions m_Wrapper;
        public PlayerSlashActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FireR => m_Wrapper.m_PlayerSlash_FireR;
        public InputAction @FireL => m_Wrapper.m_PlayerSlash_FireL;
        public InputAction @FireTop => m_Wrapper.m_PlayerSlash_FireTop;
        public InputActionMap Get() { return m_Wrapper.m_PlayerSlash; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerSlashActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerSlashActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerSlashActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerSlashActionsCallbackInterfaces.Add(instance);
            @FireR.started += instance.OnFireR;
            @FireR.performed += instance.OnFireR;
            @FireR.canceled += instance.OnFireR;
            @FireL.started += instance.OnFireL;
            @FireL.performed += instance.OnFireL;
            @FireL.canceled += instance.OnFireL;
            @FireTop.started += instance.OnFireTop;
            @FireTop.performed += instance.OnFireTop;
            @FireTop.canceled += instance.OnFireTop;
        }

        private void UnregisterCallbacks(IPlayerSlashActions instance)
        {
            @FireR.started -= instance.OnFireR;
            @FireR.performed -= instance.OnFireR;
            @FireR.canceled -= instance.OnFireR;
            @FireL.started -= instance.OnFireL;
            @FireL.performed -= instance.OnFireL;
            @FireL.canceled -= instance.OnFireL;
            @FireTop.started -= instance.OnFireTop;
            @FireTop.performed -= instance.OnFireTop;
            @FireTop.canceled -= instance.OnFireTop;
        }

        public void RemoveCallbacks(IPlayerSlashActions instance)
        {
            if (m_Wrapper.m_PlayerSlashActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerSlashActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerSlashActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerSlashActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerSlashActions @PlayerSlash => new PlayerSlashActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerSlashActions
    {
        void OnFireR(InputAction.CallbackContext context);
        void OnFireL(InputAction.CallbackContext context);
        void OnFireTop(InputAction.CallbackContext context);
    }
}
